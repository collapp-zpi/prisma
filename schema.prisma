datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


// PLUGIN

model File {
  id                 String               @id @default(cuid())
  name               String
  date               DateTime             @default(now())
  size               Int
  url                String

  draft              DraftPlugin?         @relation(fields: [draftId], references: [id])
  draftId            String?

  published          PublishedPlugin?     @relation(fields: [publishedId], references: [id])
  publishedId        String?
}

model DraftPlugin {
  id          String           @id @default(cuid())
  name        String
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  isPending   Boolean          @default(false)
  isBuilding  Boolean          @default(false)
  icon        String?

  source      File?

  authorId    String
  author      DeveloperUser    @relation(fields: [authorId], references: [id])

  published   PublishedPlugin?

  minWidth    Int              @default(1)
  maxWidth    Int              @default(4)
  minHeight   Int              @default(1)
  maxHeight   Int              @default(4)

  logs        PluginLog[]
}

model PublishedPlugin {
  id          String           @id @default(cuid())
  name        String
  description String
  version     Int              @default(1)
  updatedAt   DateTime         @default(now())
  icon        String?

  source      File?

  authorId    String
  author      DeveloperUser    @relation(fields: [authorId], references: [id])

  draftId     String
  draft       DraftPlugin      @relation(fields: [draftId], references: [id])

  minWidth    Int              @default(1)
  maxWidth    Int              @default(4)
  minHeight   Int              @default(1)
  maxHeight   Int              @default(4)

  spaces      SpacePlugin[]
}


// DEVELOPER

model DeveloperAccount {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user DeveloperUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model DeveloperSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         DeveloperUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DeveloperUser {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      DeveloperAccount[]
  sessions      DeveloperSession[]
  drafts        DraftPlugin[]
  published     PublishedPlugin[]
}


// ADMIN

model AdminSession {
  id           String        @id @default(cuid())
  sessionToken String        @unique
  userId       String
  expires      DateTime
  user         AdminUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdminUser {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
//  accounts      AdminAccount[]
  sessions      AdminSession[]
  pluginLogs    PluginLog[]
}

model AdminVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// USER

model RegularSession {
  id           String        @id @default(cuid())
  sessionToken String        @unique
  userId       String
  expires      DateTime
  user         RegularUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RegularUser {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      RegularAccount[]
  sessions      RegularSession[]
  spaces        SpaceUser[]
}

model RegularVerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RegularAccount {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user RegularUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


// logs

model PluginLog {
  id          String           @id @default(cuid())
  date        DateTime         @default(now())

  admin       AdminUser?       @relation(fields: [adminId], references: [id])
  adminId     String?

  plugin      DraftPlugin      @relation(fields: [pluginId], references: [id])
  pluginId    String
}


// model

model Space {
  id          String           @id @default(cuid())
  name        String
  description String
  icon        String?
  users       SpaceUser[]
  invites     Invite[]
  plugins     SpacePlugin[]
}

model Invite {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  expiresAt   DateTime         @default(now())

  space       Space            @relation(fields: [spaceId], references: [id])
  spaceId     String
}

model SpaceUser {
  isOwner     Boolean          @default(false)
  canEdit     Boolean          @default(false)
  canInvite   Boolean          @default(false)

  user        RegularUser      @relation(fields: [userId], references: [id])
  userId      String

  space       Space            @relation(fields: [spaceId], references: [id])
  spaceId     String

  @@unique([userId, spaceId])
}

model SpacePlugin {
  left        Int
  top         Int
  width       Int
  height      Int
  data        Json               @default("{}")

  plugin      PublishedPlugin    @relation(fields: [pluginId], references: [id])
  pluginId    String

  space       Space              @relation(fields: [spaceId], references: [id])
  spaceId     String

  @@unique([pluginId, spaceId])
}
